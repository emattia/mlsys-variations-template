#!/usr/bin/env python3
"""
MLX Gateway - The Single Entry Point

This is THE command-line interface for all MLX operations.
Users should never need to use projen or other CLIs directly.

Phase 2: Production-grade component extraction and injection system
"""

import sys
import subprocess
from pathlib import Path

# Add scripts/mlx to path
scripts_path = Path(__file__).parent / "scripts" / "mlx"
sys.path.insert(0, str(scripts_path))

def is_mlx_project() -> bool:
    """Check if current directory is an MLX project."""
    return Path("mlx.config.json").exists() or Path(".projenrc.py").exists()

def run_projen_task(task: str, *args):
    """Run a projen task with arguments."""
    try:
        cmd = ["projen", task] + list(args)
        result = subprocess.run(cmd, check=True)
        return result.returncode == 0
    except subprocess.CalledProcessError:
        print(f"‚ùå Failed to run: {' '.join(cmd)}")
        return False
    except FileNotFoundError:
        print("‚ùå Projen not found. Make sure you're in an MLX project directory.")
        return False

try:
    from create_project import app as create_app
    import typer
    from rich.console import Console
    from rich.panel import Panel
    from rich.table import Table
    
    # Import Phase 2 modules
    from component_extractor import ProductionComponentExtractor
    from component_injector import ComponentInjector
    
    console = Console()
    
    # Main MLX CLI app
    app = typer.Typer(
        help="MLX Gateway - Production-grade ML platform component system",
        add_completion=False,
        no_args_is_help=True,
    )
    
    # Add the create commands from create_project.py
    app.add_typer(create_app, name="create")
    
    @app.command("add")
    def add_component(
        component: str = typer.Argument(..., help="Component to add (e.g., 'api-serving')"),
        force: bool = typer.Option(False, "--force", "-f", help="Force add even if conflicts exist")
    ):
        """Add a component to the current MLX project."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory. Use 'mlsys create' first.")
            raise typer.Exit(1)
        
        console.print(f"üß© Adding component: [cyan]{component}[/cyan]")
        
        # Use Phase 2 component injection system
        try:
            project_root = Path(".")
            components_dir = Path("mlx-components")
            
            injector = ComponentInjector(project_root, components_dir)
            
            if injector.add_component(component, force):
                console.print(f"‚úÖ Component [green]{component}[/green] added successfully!")
                
                # Show what was added
                comp_info = injector.get_component_info(component)
                if comp_info:
                    console.print(f"üì¶ Type: {comp_info.get('component_type', 'unknown')}")
                    console.print(f"üìÅ Files: {len(comp_info.get('source_files', []))}")
                    console.print(f"üîó Dependencies: {len(comp_info.get('python_dependencies', []))}")
            else:
                console.print(f"‚ùå Failed to add component [red]{component}[/red]")
                raise typer.Exit(1)
                
        except ImportError:
            console.print("‚ö†Ô∏è  Phase 2 system not available, falling back to projen...")
            if run_projen_task("mlx:add", component):
                console.print(f"‚úÖ Component [green]{component}[/green] added successfully!")
            else:
                console.print(f"‚ùå Failed to add component [red]{component}[/red]")
                raise typer.Exit(1)
    
    @app.command("extract")
    def extract_components(
        output_dir: str = typer.Option("mlx-components", "--output", "-o", help="Output directory for components"),
        force: bool = typer.Option(False, "--force", "-f", help="Force extraction even if output exists")
    ):
        """Extract components from existing source code (Phase 2)."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory.")
            raise typer.Exit(1)
        
        console.print("üîç [bold]MLX Component Extraction Engine[/bold]")
        console.print("Analyzing source code for production-ready components...")
        
        try:
            source_dir = Path(".")
            output_path = Path(output_dir)
            
            if output_path.exists() and not force:
                console.print(f"‚ùå Output directory '{output_dir}' already exists. Use --force to overwrite.")
                raise typer.Exit(1)
            
            # Run Phase 2 extraction
            extractor = ProductionComponentExtractor(source_dir, output_path)
            components = extractor.extract_all_components()
            
            if not components:
                console.print("‚ùå No components found to extract")
                raise typer.Exit(1)
            
            # Display results
            console.print("\n‚úÖ [bold green]Extraction Complete![/bold green]")
            
            table = Table(title="Extracted Components")
            table.add_column("Component", style="cyan")
            table.add_column("Type", style="magenta")
            table.add_column("Files", justify="right")
            table.add_column("Dependencies", justify="right")
            table.add_column("Description", style="dim")
            
            for name, meta in components.items():
                table.add_row(
                    name,
                    meta.component_type,
                    str(len(meta.source_files)),
                    str(len(meta.python_dependencies)),
                    meta.description[:50] + "..." if len(meta.description) > 50 else meta.description
                )
            
            console.print(table)
            console.print(f"\nüìã Registry saved to: [cyan]{output_path / 'registry.json'}[/cyan]")
            console.print(f"üéØ Ready for: [green]./mlsys add <component-name>[/green]")
            
        except ImportError:
            console.print("‚ö†Ô∏è  Phase 2 system not available, falling back to projen...")
            if run_projen_task("mlx:extract-components"):
                console.print("‚úÖ Component extraction completed!")
            else:
                console.print("‚ùå Failed to extract components")
                raise typer.Exit(1)
        except Exception as e:
            console.print(f"‚ùå Extraction failed: {e}")
            raise typer.Exit(1)
    
    @app.command("list")
    def list_components():
        """List available MLX components."""
        console.print("üìã [bold]Available MLX Components[/bold]")
        
        try:
            project_root = Path(".")
            components_dir = Path("mlx-components")
            
            injector = ComponentInjector(project_root, components_dir)
            components = injector.list_available_components()
            
            if not components:
                console.print("‚ùå No components available. Run 'mlsys extract' first.")
                return
            
            table = Table()
            table.add_column("Component", style="cyan")
            table.add_column("Type", style="magenta")
            table.add_column("Version", style="dim")
            table.add_column("Files", justify="right")
            table.add_column("Deps", justify="right")
            table.add_column("Description", style="dim")
            
            for comp in components:
                table.add_row(
                    comp["name"],
                    comp["type"],
                    comp["version"],
                    str(comp["files"]),
                    str(comp["dependencies"]),
                    comp["description"][:60] + "..." if len(comp["description"]) > 60 else comp["description"]
                )
            
            console.print(table)
            
        except ImportError:
            console.print("‚ö†Ô∏è  Phase 2 system not available, falling back to projen...")
            run_projen_task("mlx:list")
        except Exception as e:
            console.print(f"‚ùå Failed to list components: {e}")
    
    @app.command("status")
    def project_status():
        """Show MLX project health and status."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory.")
            raise typer.Exit(1)
        
        console.print("üìä [bold]MLX Project Status[/bold]")
        
        try:
            # Show installed components
            project_root = Path(".")
            components_dir = Path("mlx-components")
            
            if not components_dir.exists():
                console.print("‚ö†Ô∏è  No components directory found. Run 'mlsys extract' first.")
                return
            
            injector = ComponentInjector(project_root, components_dir)
            installed = injector.project_config.get("platform", {}).get("components", [])
            
            if installed:
                console.print(f"‚úÖ Installed components: [green]{', '.join(installed)}[/green]")
            else:
                console.print("üì¶ No components installed yet")
            
            # Show project structure
            console.print("\nüìÅ Project Structure:")
            key_paths = ["src/", "conf/", "tests/", "mlx-components/"]
            for path in key_paths:
                path_obj = Path(path)
                if path_obj.exists():
                    if path_obj.is_dir():
                        file_count = len(list(path_obj.rglob("*")))
                        console.print(f"  ‚úÖ {path} ({file_count} files)")
                    else:
                        console.print(f"  ‚úÖ {path}")
                else:
                    console.print(f"  ‚ùå {path} (missing)")
            
        except Exception as e:
            console.print(f"‚ö†Ô∏è  Error checking status: {e}")
            # Fall back to projen
            run_projen_task("mlx:status")
    
    @app.command("dev")
    def start_dev_server():
        """Start the development server."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory.")
            raise typer.Exit(1)
        
        console.print("üöÄ Starting development server...")
        run_projen_task("api:dev")
    
    @app.command("test")
    def run_tests(
        smart: bool = typer.Option(False, "--smart", "-s", help="Run AI-selected smart tests")
    ):
        """Run project tests."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory.")
            raise typer.Exit(1)
        
        if smart:
            console.print("üß† Running smart tests...")
            run_projen_task("test:smart")
        else:
            console.print("üß™ Running all tests...")
            run_projen_task("test")
    
    @app.command("info")
    def component_info(
        component: str = typer.Argument(..., help="Component name to get info about")
    ):
        """Get detailed information about a specific component."""
        try:
            project_root = Path(".")
            components_dir = Path("mlx-components")
            
            injector = ComponentInjector(project_root, components_dir)
            info = injector.get_component_info(component)
            
            if not info:
                console.print(f"‚ùå Component '{component}' not found")
                raise typer.Exit(1)
            
            console.print(f"üì¶ [bold]{component}[/bold] Component Information")
            console.print(f"Description: {info.get('description', 'N/A')}")
            console.print(f"Type: {info.get('component_type', 'N/A')}")
            console.print(f"Version: {info.get('version', 'N/A')}")
            
            # Dependencies
            python_deps = info.get("python_dependencies", [])
            if python_deps:
                console.print(f"\nüêç Python Dependencies ({len(python_deps)}):")
                for dep in python_deps:
                    console.print(f"  ‚Ä¢ {dep}")
            
            # System dependencies
            system_deps = info.get("system_dependencies", [])
            if system_deps:
                console.print(f"\nüîß System Dependencies ({len(system_deps)}):")
                for dep in system_deps:
                    console.print(f"  ‚Ä¢ {dep.get('name', 'unknown')} ({dep.get('type', 'unknown')})")
            
            # Files
            source_files = info.get("source_files", [])
            if source_files:
                console.print(f"\nüìÅ Source Files ({len(source_files)}):")
                for file in source_files[:10]:  # Show first 10
                    console.print(f"  ‚Ä¢ {file}")
                if len(source_files) > 10:
                    console.print(f"  ... and {len(source_files) - 10} more")
            
            # Environment variables
            env_vars = info.get("environment_variables", [])
            secrets = info.get("required_secrets", [])
            if env_vars or secrets:
                console.print(f"\nüîê Environment Variables:")
                for var in env_vars:
                    console.print(f"  ‚Ä¢ {var}")
                if secrets:
                    console.print(f"  Secrets: {', '.join(secrets)}")
            
        except Exception as e:
            console.print(f"‚ùå Failed to get component info: {e}")
            raise typer.Exit(1)
    
    @app.command("config")
    def manage_config(
        show: bool = typer.Option(False, "--show", help="Show current configuration"),
        edit: bool = typer.Option(False, "--edit", help="Edit configuration")
    ):
        """Manage MLX project configuration."""
        if not is_mlx_project():
            console.print("[red]Error:[/red] Not in an MLX project directory.")
            raise typer.Exit(1)
        
        if show:
            console.print("‚öôÔ∏è [bold]Current MLX Configuration[/bold]:")
            # Show mlx.config.json and key settings
            config_file = Path("mlx.config.json")
            if config_file.exists():
                import json
                with open(config_file) as f:
                    config = json.load(f)
                console.print_json(data=config)
            else:
                console.print("[yellow]No MLX config found[/yellow]")
        
        if edit:
            console.print("üìù Opening configuration editor...")
            # Could open editor or run projen config task
            run_projen_task("config:edit")
    
    @app.callback()
    def main():
        """MLX Gateway - Production-grade ML platform component system."""
        # Show upgrade message with Phase 2 features
        if len(sys.argv) == 1:
            console.print(Panel(
                "üöÄ [bold]MLX Gateway - Phase 2 Ready![/bold]\n\n"
                "[green]Component Management:[/green]\n"
                "‚Ä¢ [cyan]./mlsys extract[/cyan] - Extract components from source code\n"
                "‚Ä¢ [cyan]./mlsys add api-serving[/cyan] - Add production-ready components\n"
                "‚Ä¢ [cyan]./mlsys list[/cyan] - List available components\n"
                "‚Ä¢ [cyan]./mlsys info <component>[/cyan] - Component details\n\n"
                "[green]Project Management:[/green]\n"
                "‚Ä¢ [cyan]./mlsys create my-project[/cyan] - Create new projects\n"
                "‚Ä¢ [cyan]./mlsys status[/cyan] - Check project health\n"
                "‚Ä¢ [cyan]./mlsys dev[/cyan] - Start development server\n\n"
                "Run [bold]./mlsys --help[/bold] to see all commands.",
                title="MLX Gateway v2.0",
                border_style="blue"
            ))
    
    if __name__ == "__main__":
        app()
        
except ImportError as e:
    print("‚ùå MLX dependencies not found.")
    print("   Installing required dependencies...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "typer[all]", "rich", "pyyaml"
        ])
        print("‚úÖ Dependencies installed! Please run the command again.")
    except subprocess.CalledProcessError:
        print(f"   Failed to install dependencies. Error: {e}")
        print("   Please run: pip install typer[all] rich pyyaml")
    sys.exit(1)
