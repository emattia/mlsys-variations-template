#!/usr/bin/env python3
import shutil
from pathlib import Path

import toml
import typer
from rich.console import Console
from rich.panel import Panel

# --- Configuration ---
# The original template name to be replaced
OLD_PROJECT_NAME_SNAKE = "analysis_template"
OLD_PROJECT_NAME_KEBAB = "analysis-template"
OLD_PROJECT_NAME_TITLE = "Analysis Template"

# --- CLI Application Setup ---
app = typer.Typer(
    help="A utility CLI for managing this project.",
    add_completion=False,
    no_args_is_help=True,
)
console = Console()


def to_snake_case(name: str) -> str:
    """Converts a string to snake_case."""
    return name.lower().replace("-", "_").replace(" ", "_")


def to_kebab_case(name: str) -> str:
    """Converts a string to kebab-case."""
    return name.lower().replace("_", "-").replace(" ", "-")


def to_title_case(name: str) -> str:
    """Converts a string to Title Case, handling hyphens and underscores."""
    return " ".join(word.capitalize() for word in name.replace("-", "_").split("_"))


@app.command()
def init(
    new_name: str = typer.Argument(
        ...,
        help="The new name for the project (e.g., 'customer-churn-model').",
    ),
):
    """
    Initializes and renames the project template.
    """
    project_root = Path(__file__).parent.resolve()
    old_src_path = project_root / "src" / OLD_PROJECT_NAME_SNAKE

    # --- 1. Introduction ---
    story = (
        "You stand at the trailhead of a new mlsys. Before you lies a long, templated lineage, forged from "
        "from past journeys. This script is your guide, ready to shape this repository into a masterpiece. "
        "It will set the paths according to your wish, update the maps, and prepare your expedition for the discoveries that await."
    )

    haiku = """
[green]Solid foundation,[/green]
[green]New ideas now take root,[/green]
[bold green]Growth is assured here.[/bold green]
    """
    console.print(
        Panel(
            f"{story}\n\n{haiku}",
            title="Project Initialization",
            border_style="blue",
            expand=False,
        )
    )

    if not old_src_path.exists():
        console.print(
            f"\n[bold red]Error:[/bold red] Project already appears to be initialized. "
            f"The directory '[cyan]{old_src_path.name}[/cyan]' was not found."
        )
        raise typer.Exit(code=1)

    console.print(
        f"\nðŸš€ Starting initialization with project name: [bold cyan]{new_name}[/bold cyan]"
    )

    # --- 2. Derive New Names ---
    new_snake_case = to_snake_case(new_name)
    new_kebab_case = to_kebab_case(new_name)
    new_title_case = to_title_case(new_name)
    console.print(f"   - Package name: [green]{new_snake_case}[/green]")
    console.print(f"   - Repo name: [green]{new_kebab_case}[/green]")

    # --- 3. Rename Source Directory ---
    new_src_path = project_root / "src" / new_snake_case
    shutil.move(str(old_src_path), str(new_src_path))
    console.print(f"âœ… Renamed source directory to [cyan]{new_src_path.name}[/cyan]")

    # --- 4. Update pyproject.toml ---
    pyproject_path = project_root / "pyproject.toml"
    if pyproject_path.exists():
        try:
            data = toml.load(pyproject_path)
            # Update project name
            data["project"]["name"] = new_kebab_case
            # Update ruff's linter settings for the new package name
            if "tool" in data and "ruff" in data["tool"]:
                data["tool"]["ruff"]["lint"]["isort"]["known-first-party"] = [
                    new_snake_case
                ]
            with open(pyproject_path, "w") as f:
                toml.dump(data, f)
            console.print(
                "âœ… Updated [cyan]pyproject.toml[/cyan] with new project name."
            )
        except Exception as e:
            console.print(f"[bold red]Error updating pyproject.toml:[/bold red] {e}")
            raise typer.Exit(code=1)

    # --- 5. Update Documentation Files ---
    docs_path = project_root / "docs"
    md_files = list(docs_path.rglob("*.md"))
    files_changed_count = 0
    for md_file in md_files:
        try:
            content = md_file.read_text()
            if OLD_PROJECT_NAME_KEBAB in content or OLD_PROJECT_NAME_TITLE in content:
                content = content.replace(OLD_PROJECT_NAME_KEBAB, new_kebab_case)
                content = content.replace(OLD_PROJECT_NAME_TITLE, new_title_case)
                md_file.write_text(content)
                files_changed_count += 1
        except Exception:
            # Ignore binary files or read errors
            pass
    console.print(f"âœ… Scanned and updated {files_changed_count} documentation files.")

    # --- 6. Final Message ---
    console.print(
        Panel(
            "ðŸŽ‰ [bold green]Initialization Complete![/bold green] ðŸŽ‰\n\n"
            "Your project is ready. Next steps:\n"
            "1. Initialize a new git repository (`git init`)\n"
            "2. Install dependencies (`uv pip install -e .[dev]`)\n"
            "3. Run the tests (`pytest`)",
            title="Success",
            border_style="green",
            expand=False,
        )
    )


if __name__ == "__main__":
    app()
