#!/usr/bin/env python3
import subprocess
import sys
import importlib.util
import os
import venv
import shutil

# Minimal dependencies for the bootstrap wizard
BOOTSTRAP_DEPS = ["rich", "typer[all]"]
VENV_DIR = ".bootstrap_venv"


def check_and_install_deps():
    """
    Checks if running in a dedicated venv. If not, creates the venv,
    installs dependencies, and re-launches. If in the venv, ensures
    dependencies are installed.
    """
    # Logic to determine venv_python based on OS
    if sys.platform == "win32":
        venv_python = os.path.join(VENV_DIR, "Scripts", "python.exe")
    else:
        venv_python = os.path.join(VENV_DIR, "bin", "python")

    # If not in our venv, create it and re-launch
    if sys.executable != os.path.abspath(venv_python):
        if not os.path.exists(venv_python):
            print(f"Creating bootstrap virtual environment in {VENV_DIR}...")
            venv.create(VENV_DIR, with_pip=True)
            print("Installing bootstrap dependencies...")
            try:
                # Install deps into the venv
                subprocess.check_call([venv_python, "-m", "pip", "install", *BOOTSTRAP_DEPS], stdout=subprocess.DEVNULL)
                print("Dependencies installed successfully.")
            except subprocess.CalledProcessError:
                print("Error installing dependencies. Removing venv.", file=sys.stderr)
                shutil.rmtree(VENV_DIR)
                sys.exit(1)

        # Relaunch into the venv
        print("Re-launching in bootstrap environment...")
        os.execv(venv_python, [venv_python, *sys.argv])

    # If we are here, we are inside the venv.
    # Now, just check if dependencies are installed and install if they are missing for some reason.
    missing = [dep for dep in BOOTSTRAP_DEPS if not importlib.util.find_spec(dep.split('[')[0])]
    if missing:
        print(f"Installing missing packages in bootstrap venv: {', '.join(missing)}...")
        try:
            # sys.executable is the venv python here.
            subprocess.check_call([sys.executable, "-m", "pip", "install", *missing], stdout=subprocess.DEVNULL)
            print("Packages installed successfully.")
        except subprocess.CalledProcessError:
            print(f"Error: Could not install packages. Please run manually in venv: pip install {' '.join(missing)}", file=sys.stderr)
            sys.exit(1)


def main():
    """Run the bootstrap process."""
    check_and_install_deps()

    # Now that dependencies are installed, we can safely import and run the wizard
    from src.analysis_template.bootstrap import bootstrap
    bootstrap()

if __name__ == "__main__":
    main()
