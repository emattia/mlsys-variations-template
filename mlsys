#!/usr/bin/env python3
import subprocess
import sys
from pathlib import Path

# --- Configuration ---
VENV_DIR = ".bootstrap_venv"
DEPS = ["toml", "typer[all]", "rich"]
CORE_SCRIPT_PATH = "scripts/_mlsys_core.py"


def main():
    """
    Ensures a dedicated virtual environment exists and has the necessary
    dependencies, then runs the core application script.
    """
    project_root = Path(__file__).parent.resolve()
    venv_path = project_root / VENV_DIR
    core_script_full_path = project_root / CORE_SCRIPT_PATH

    venv_python = (
        venv_path / "Scripts" / "python.exe"
        if sys.platform == "win32"
        else venv_path / "bin" / "python"
    )

    # 1. Create venv and install dependencies if it doesn't exist
    if not venv_python.exists():
        print(f"[*] Creating bootstrap virtual environment in '{VENV_DIR}'...")
        subprocess.run(
            [sys.executable, "-m", "venv", venv_path],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )
        print(f"[*] Installing dependencies: {', '.join(DEPS)}")
        subprocess.run(
            [str(venv_python), "-m", "pip", "install", *DEPS],
            check=True,
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
        )

    # 2. Run the core script using the venv's python
    # We pass all command-line arguments *except* the script name and the 'init' command.
    args_to_pass = sys.argv[2:]
    command = [str(venv_python), str(core_script_full_path), *args_to_pass]
    result = subprocess.run(command)

    # 3. Propagate the exit code from the core script
    sys.exit(result.returncode)


if __name__ == "__main__":
    main()
