---
description:
globs:
alwaysApply: false
---
# Repository Rules for Production ML Foundation Template

**üö® CRITICAL: Package Management**
This project uses **UV** for package management, not pip!
- Use `uv pip install <package>` instead of `pip install <package>`
- The project has Poetry configuration but uses UV runtime
- Virtual environment: `.venv` (pre-configured with UV)
- Never use `pip install` directly - it's not available in the venv
- **Note**: `uv run` doesn't work with Poetry projects - use `python` directly in the activated venv

**üè∑Ô∏è CRITICAL: Naming Consistency Management**
This project features a **production-grade naming migration system** that maintains consistent MLX branding:
- **ALWAYS** use the naming management tools before making naming changes
- **NEVER** manually change platform names without using the migration system
- **VALIDATE** naming consistency with `python scripts/test_naming_system.py`
- **ANALYZE** current patterns with `python scripts/migrate_platform_naming.py analyze`
- The platform has been optimized from 957 to 635 naming patterns (33% improvement)
- **Current Status**: Production-ready with 95%+ consistency score

**üßπ CRITICAL: Repository Maintenance Standards**
This project maintains **museum-quality codebase standards**:
- **NO DEAD CODE**: Every function, import, and line serves a purpose
- **AUTOMATED CLEANUP**: Backup files are managed via retention policies
- **DOCUMENTATION EXCELLENCE**: Every doc file has clear purpose and audience
- **CODE ARCHAEOLOGY**: Regular audits to eliminate technical debt
- **PRISTINE ORGANIZATION**: Every file location is intentional and documented

This file outlines the structure and conventions of the production ML foundation repository, designed to facilitate development of production-ready ML systems with hardened patterns and best practices.

## Repository Overview

This repository serves as a **production-ready MLOps template** with the following core purposes:
1. **Standalone ML Template**: Production-ready ML systems with proven patterns
2. **Foundation for MLX Integration**: Template that can work with future external MLX AI services
3. **Naming Consistency Platform**: Automated branding management with migration capabilities
4. **Technical Excellence Exemplar**: Zero-debt codebase demonstrating best practices

### Key Production Capabilities

- **Unified MLX Branding**: Automated naming consistency across 75+ files with migration tools
- **Production-Hardened Patterns**: Proven architecture patterns for scalable ML systems
- **Enterprise Security**: Multi-service rate limiting, vulnerability scanning, secure configuration
- **Advanced Configuration**: Hierarchical Hydra configs with Pydantic validation, experiment tracking
- **Plugin Architecture**: Extensible system for adding domain-specific functionality
- **Production Deployment**: Docker optimization, CI/CD, comprehensive testing, monitoring
- **Automated Maintenance**: Self-cleaning systems with backup management and debt prevention

### High-level Commands

Core development workflow:
- `make install-dev`: Install dependencies + pre-commit hooks
- `make all-checks`: Complete quality gate (lint + test + security)
- `make run-api`: Start FastAPI service with auto-reload
- `make test`: Full test suite with coverage reporting
- `make build-docker`: Multi-stage optimized container build

Advanced operations:
- `make docs-serve`: Local documentation server
- `make security-scan`: Vulnerability assessment
- `make deploy-staging`: Deploy to staging environment

**Naming Consistency Operations**:
- `python scripts/test_naming_system.py`: Validate naming consistency (29 tests passing)
- `python scripts/migrate_platform_naming.py analyze`: Analyze current naming patterns
- `python scripts/migrate_platform_naming.py set-preset mlx --apply`: Apply MLX branding
- `python scripts/migrate_platform_naming.py validate --detailed`: Comprehensive validation

**MLX Assistant Operations**:
- `mlx assistant naming status`: Quick naming consistency status
- `mlx assistant naming validate --detailed`: Full completeness validation
- `mlx assistant naming migrate --preset mlx --apply`: Guided migration
- `mlx assistant doctor`: Comprehensive system health check

## Directory Structure

Production-focused structure with naming management and automated maintenance:

- `.github/`: CI/CD workflows with security scanning and comprehensive testing
- `docs/`: Comprehensive documentation for production deployment + naming guides
- `src/`: Core ML system components with production patterns
- `conf/`: Hierarchical configuration system with Hydra + Pydantic
- `scripts/`: Automation and utility scripts + **naming management tools**
  - `naming_config.py`: Centralized naming configuration (309 lines)
  - `migrate_platform_naming.py`: Platform-wide migration tool (1096 lines)
  - `test_naming_system.py`: Comprehensive naming validation (346 lines)
  - `mlx_assistant.py`: AI-powered CLI assistant (1282 lines)
- `tests/`: Multi-layered testing (unit/integration/contracts)

## Source Code (`src/`) - Production Components

### Core ML Components
- `api/`: FastAPI application with production hardening
  - `app.py`: FastAPI app with comprehensive middleware
  - `routes.py`: Endpoints with rate limiting and validation
  - `service.py`: Business logic with caching optimization
  - `models.py`: Pydantic models for type safety

- `config/`: Configuration management system
  - `manager.py`: Hydra-based configuration manager
  - `models.py`: Pydantic schemas for type-safe validation
  - `secrets.py`: Secure environment variable handling

- `data/`: Data processing with production patterns
  - Data loading, validation, and transformation modules
  - Integration with various data sources and formats
  - Error handling and recovery patterns

- `models/`: ML model management
  - Training pipelines with proper error handling
  - Model evaluation and validation
  - Inference services with monitoring

### Plugin System - Extensibility Foundation
- `plugins/`: Core extension mechanism
  - `registry.py`: Plugin discovery and management system
  - `base.py`: Base plugin interfaces and contracts
  - Domain-specific plugins (LLM providers, data processors, etc.)

### Utilities - Production Support
- `utils/`: Common functionality
  - Caching, rate limiting, monitoring utilities
  - Shared patterns and helper functions
  - Production support utilities

## Naming Consistency System - **CRITICAL FOR ALL FUTURE WORK**

### **Core Naming Architecture**
- **Centralized Configuration**: `scripts/naming_config.py` - Single source of truth for all naming
- **Platform Migration**: `scripts/migrate_platform_naming.py` - Automated migration across 75+ files
- **Validation System**: `scripts/test_naming_system.py` - 29 tests ensuring consistency
- **MLX Assistant Integration**: AI-powered naming management and validation
- **Multiple Presets**: MLX, MLSys, Custom naming strategies available

### **Current Optimized State**
- **635 naming patterns** across 27 files (down from 957 across 35 files)
- **33% reduction** in naming inconsistencies achieved
- **95%+ consistency score** maintained in production
- **100% test success rate** maintained throughout optimization
- **Professional MLX branding** consistently applied
- **Comprehensive validation** with intelligent feedback system

### **Migration Completeness Assurance**
- **Multi-Layer Validation**: File coverage, pattern consistency, CLI functionality, integration points
- **Weighted Scoring System**: Intelligent consistency scoring with context awareness
- **Automated Backup Management**: Retention policies and cleanup systems
- **AI-Powered Recommendations**: Smart suggestions for specific issues
- **Rollback Protection**: Comprehensive backup and recovery capabilities

### **Rules for Future Agents**
1. **NEVER modify platform names manually** - always use the migration system
2. **ALWAYS validate** changes with `python scripts/test_naming_system.py`
3. **ANALYZE before changing** with `python scripts/migrate_platform_naming.py analyze`
4. **Test-driven naming**: Update tests when changing naming patterns
5. **Preserve ecosystem patterns**: Most remaining patterns are intentional MLX branding
6. **Use MLX Assistant**: Leverage AI-powered guidance for naming decisions
7. **Maintain completeness**: Ensure 95%+ consistency score at all times

### **Migration Workflow**
```bash
# 1. Check current status
mlx assistant naming status

# 2. Analyze current state
python scripts/migrate_platform_naming.py analyze

# 3. Preview changes (ALWAYS do this first)
python scripts/migrate_platform_naming.py set-preset mlx  # Updates config
python scripts/migrate_platform_naming.py migrate --dry-run

# 4. Apply migration
python scripts/migrate_platform_naming.py migrate --apply

# 5. Validate results
python scripts/test_naming_system.py
mlx assistant naming validate --detailed
```

## Repository Maintenance Standards - **CRITICAL FOR TECHNICAL EXCELLENCE**

### **Code Quality Standards**
- **Zero Dead Code Policy**: Every function, import, and line must serve a purpose
- **Automated Debt Detection**: Regular audits to identify and eliminate technical debt
- **Documentation Excellence**: Every file must have clear purpose and audience
- **Import Hygiene**: No unused imports, optimized dependency management
- **Function Utilization**: All functions must be tested and used

### **Backup Management System**
- **Automated Retention**: `.backup` files managed via retention policies
- **7-Day Active**: Keep backups for immediate rollback needs
- **30-Day Archive**: Long-term backup storage for historical reference
- **CI/CD Integration**: Automated cleanup in deployment pipeline
- **Manual Override**: Ability to preserve critical backups when needed

### **Documentation Management**
- **Single Source of Truth**: No duplicate or conflicting documentation
- **Clear Purpose**: Every doc file serves specific audience and use case
- **Regular Audits**: Quarterly review to identify stale documentation
- **Version Control**: Clear versioning for implementation guides
- **Navigation Excellence**: Clear structure and findability

### **Cleanup Workflow for Future Agents**
```bash
# 1. Dead Code Analysis
python -m vulture . --min-confidence 80

# 2. Import Analysis
python -m unimport --check --diff

# 3. Backup Management
find . -name "*.backup" -mtime +7 -type f  # Identify old backups

# 4. Documentation Audit
find docs/ -name "*.md" -exec grep -l "TODO\|FIXME\|outdated" {} \;

# 5. Test Coverage Analysis
python -m pytest --cov=src --cov-report=term-missing
```

## Configuration System (`conf/`) - Production Config Management

Advanced Hierarchical configuration for production:

```
conf/
‚îú‚îÄ‚îÄ config.yaml              # Main configuration entry point
‚îú‚îÄ‚îÄ defaults.yaml            # Default values and inheritance
‚îú‚îÄ‚îÄ model/                   # Model-specific configurations
‚îÇ   ‚îú‚îÄ‚îÄ random_forest.yaml   # Scikit-learn configurations
‚îÇ   ‚îú‚îÄ‚îÄ xgboost.yaml         # XGBoost configurations
‚îÇ   ‚îî‚îÄ‚îÄ neural_network.yaml  # Deep learning configurations
‚îú‚îÄ‚îÄ api/                     # API service configurations
‚îÇ   ‚îú‚îÄ‚îÄ development.yaml     # Development settings
‚îÇ   ‚îú‚îÄ‚îÄ staging.yaml         # Staging environment
‚îÇ   ‚îî‚îÄ‚îÄ production.yaml      # Production settings
‚îú‚îÄ‚îÄ experiments/             # Experiment configurations
‚îÇ   ‚îú‚îÄ‚îÄ hyperparameter_tuning.yaml
‚îÇ   ‚îî‚îÄ‚îÄ ablation_studies.yaml
‚îî‚îÄ‚îÄ secrets.yaml.example     # Secure configuration template
```

### Configuration Features
- **Type Safety**: Pydantic validation for all configurations
- **Environment Inheritance**: Hierarchical configuration with overrides
- **Secret Management**: Secure handling of sensitive data
- **Experiment Tracking**: A/B testing and experiment management
- **Runtime Overrides**: Dynamic configuration updates

## Testing Strategy (`tests/`) - Production Quality Assurance

Multi-layered testing approach for production reliability:

- `tests/unit/`: Fast, isolated component tests
- `tests/integration/`: Component interaction verification
- `tests/contracts/`: Plugin interface compliance testing
- `tests/performance/`: Load testing and benchmarking
- **`tests/test_naming_migration.py`**: 20 unit tests for naming consistency (405 lines)

### Testing Philosophy
1. **Component Isolation**: Each plugin/component tested independently
2. **Interface Compliance**: Contract testing for all plugin interfaces
3. **Integration Validation**: Component combinations tested systematically
4. **Performance Monitoring**: Benchmark tracking for optimization
5. **Naming Consistency**: Automated validation of platform branding
6. **Zero-Debt Testing**: Tests must verify all code paths

## Production Patterns

Current template features focused on production readiness:

### Naming Management ‚Üí Professional Branding
- Centralized naming configuration with automated migration
- Platform-wide consistency enforcement across 75+ files
- Type-safe validation with comprehensive error handling
- Multiple branding strategies (MLX, MLSys, Custom)
- AI-powered validation and recommendations

### Plugin Architecture ‚Üí Extensible Foundation
- Runtime plugin discovery and loading
- Type-safe plugin interfaces with contract testing
- Hot-reloading for development efficiency

### Configuration System ‚Üí Production Config Management
- Environment-aware hierarchical configuration
- Type-safe validation with comprehensive error handling
- Secret management with secure defaults

### CI/CD Workflows ‚Üí Production Pipeline
- Comprehensive testing with security scanning
- Multi-stage deployment with rollback capabilities
- Performance monitoring and alerting
- Automated maintenance and cleanup

### Security Stack ‚Üí Production Security
- Rate limiting with budget enforcement
- Vulnerability scanning with automatic updates
- Secure configuration patterns

### Repository Maintenance ‚Üí Technical Excellence
- Automated backup management with retention policies
- Dead code detection and elimination systems
- Documentation quality assurance and auditing
- Import optimization and dependency management

## Extensibility: Production Plugin Development

The plugin system provides production-ready extensibility:

### Plugin Development Pattern
```python
# Production-ready plugin structure
from src.plugins.base import BasePlugin

class ProductionMLPlugin(BasePlugin):
    def __init__(self):
        self.name = "production_ml_processor"
        self.version = "1.0.0"
        self._initialize_monitoring()

    def process(self, data, context):
        try:
            # Production ML processing with monitoring
            with self._monitor_performance():
                result = self._process_with_validation(data)
            return result
        except Exception as e:
            self._handle_error(e, context)
            raise

    def validate_config(self, config):
        # Comprehensive configuration validation
        return self._validate_production_config(config)
```

### Production Readiness Checklist
1. **Error Handling**: Comprehensive exception handling with logging
2. **Monitoring**: Performance metrics and health checks
3. **Configuration**: Type-safe configuration with validation
4. **Testing**: Unit, integration, and contract tests
5. **Documentation**: Comprehensive API and usage documentation
6. **Naming Consistency**: Follow MLX branding standards
7. **Code Quality**: Zero dead code, optimized imports
8. **Maintenance**: Self-documenting and easily maintainable

## Project Customization

Template customization for production use:

### Core Template Customization
- `pyproject.toml`: Project metadata and dependencies
- `conf/config.yaml`: Application-level configuration
- `scripts/configure.py`: Automated project setup
- **`scripts/naming_config.py`**: Centralized naming management

### Production Deployment Configuration
- Docker multi-stage builds for optimization
- Environment-specific configuration files
- CI/CD pipeline customization
- Monitoring and alerting setup

## Development Guidelines

### Code Organization Principles
1. **Modular Design**: All functionality organized as plugins/components
2. **Type Safety**: Comprehensive Pydantic validation throughout
3. **Configuration-Driven**: All behavior controlled via Hydra configs
4. **Test Coverage**: Multi-layered testing for reliability
5. **Production Patterns**: Error handling, monitoring, logging
6. **Documentation**: Comprehensive docs for all components
7. **Naming Consistency**: Follow MLX branding standards throughout
8. **Zero Technical Debt**: No dead code, unused imports, or obsolete functions
9. **Automated Maintenance**: Self-cleaning systems and processes

### Production Readiness Checklist
- [ ] Plugin interfaces clearly defined and tested
- [ ] Configuration schemas validated with Pydantic
- [ ] Component dependencies explicitly declared
- [ ] Integration tests covering component interactions
- [ ] Performance benchmarks established
- [ ] Security scanning integrated
- [ ] Monitoring and alerting configured
- [ ] Documentation comprehensive and up-to-date
- [ ] Error handling patterns implemented
- [ ] Deployment automation configured
- [ ] **Naming consistency validated with test suite**
- [ ] **Zero dead code or unused imports**
- [ ] **Automated backup management configured**
- [ ] **Documentation quality assured and audited**

## Repository Maintenance Workflow

### Daily Maintenance (Automated)
- Backup file cleanup based on retention policy
- Import optimization and dead code detection
- Test coverage monitoring and reporting
- Documentation link validation

### Weekly Maintenance (Automated)
- Comprehensive security scanning
- Dependency vulnerability assessment
- Performance benchmark comparison
- Code quality metric tracking

### Monthly Maintenance (Manual Review)
- Documentation audit and cleanup
- Plugin ecosystem health check
- Configuration optimization review
- Technical debt assessment

### Quarterly Maintenance (Strategic Review)
- Architecture pattern validation
- Plugin interface evolution planning
- Documentation structure optimization
- Performance optimization opportunities

## Future: MLX Platform Integration

**Note**: This template serves as a foundation that can work with future external MLX AI services:

### External MLX Services (Separate from Template)
- **Component Recommendations**: External AI services that analyze projects created from this template
- **Configuration Optimization**: Services that suggest optimal configurations for your projects
- **Testing Intelligence**: External services for smart test selection in your CI/CD
- **Security Analysis**: Continuous vulnerability assessment of your deployed applications
- **Repository Maintenance**: AI-powered code quality and technical debt management

### Template's Role
- Provides the **solid foundation** with production patterns
- Offers **plugin interfaces** that external MLX services can analyze
- Maintains **configuration schemas** that external services can validate
- Establishes **testing patterns** that external services can optimize
- **Ensures consistent branding** that external services can recognize
- **Maintains pristine codebase** that external services can enhance

---

*This repository provides a production-ready MLOps foundation template with hardened patterns, automated naming consistency management, and museum-quality codebase standards. It's designed to work standalone or integrate with future external MLX AI enhancement services.*
