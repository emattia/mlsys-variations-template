---
description:
globs:
alwaysApply: false
---
When creating a new plugin, use the following structure and **CRITICAL requirements**.

**üè∑Ô∏è CRITICAL: MLX Naming Standards**
All new plugins MUST follow MLX naming consistency standards:
- Plugin names MUST use format: `mlx-plugin-{name}` (e.g., `mlx-plugin-sklearn`)
- Main module MUST follow MLX branding patterns
- Configuration MUST use MLX naming conventions
- Documentation MUST reference current platform naming (use `mlx assistant naming status` to verify)
- **VALIDATE** plugin naming with `python scripts/test_naming_system.py` after creation

**üßπ CRITICAL: Code Quality Standards**
All new plugins MUST meet museum-quality standards:
- **NO DEAD CODE**: Every function must be used and tested
- **NO UNUSED IMPORTS**: Optimize all import statements
- **COMPREHENSIVE DOCUMENTATION**: Every function, class, and module documented
- **ERROR HANDLING**: Production-grade exception handling and logging
- **TYPE SAFETY**: Full type hints and Pydantic validation

First, create a new directory for your plugin under `src/plugins/`. For example, `src/plugins/my_new_plugin`.

Inside that directory, create an `__init__.py` that contains your plugin class. It should inherit from one of the base plugin classes from `src/plugins/base.py`.

Here is a template for the plugin file, which you can adapt.
@scripts/templates/plugin_skeleton.py.jinja

You must also add a contract test for your new plugin. Create a test file in `tests/contracts/`.

Here is a template for the test file.
@scripts/templates/plugin_test_skeleton.py.jinja

**üìã Post-Creation Checklist**
After creating your plugin, MUST complete these steps:

1. **Naming Validation**:
   ```bash
   python scripts/test_naming_system.py
   mlx assistant naming validate --detailed
   ```

2. **Code Quality Check**:
   ```bash
   python -m vulture . --min-confidence 80  # Check for dead code
   python -m unimport --check --diff         # Check for unused imports
   ```

3. **Test Coverage**:
   ```bash
   python -m pytest tests/contracts/test_your_plugin.py -v
   python -m pytest --cov=src/plugins/your_plugin --cov-report=term-missing
   ```

4. **Documentation Quality**:
   - Ensure README.md follows MLX branding
   - Verify all functions have docstrings
   - Check that examples use current CLI names

5. **Integration Test**:
   ```bash
   mlx assistant doctor  # Verify plugin doesn't break system health
   ```

**üö® Plugin Rejection Criteria**
Your plugin will be rejected if:
- Contains naming inconsistencies (use MLX Assistant to verify)
- Has dead code or unused imports
- Missing comprehensive tests
- Documentation doesn't follow MLX standards
- Breaks existing naming consistency (< 95% score)

**üéØ Plugin Excellence Standards**
Your plugin achieves excellence when:
- ‚úÖ 100% MLX naming consistency
- ‚úÖ Zero dead code or unused imports
- ‚úÖ Comprehensive test coverage (>95%)
- ‚úÖ Production-grade error handling
- ‚úÖ Clear, purpose-driven documentation
- ‚úÖ Seamless integration with MLX ecosystem

**üí° Pro Tips for Plugin Development**
1. **Start with Naming**: Use `mlx assistant naming status` to understand current conventions
2. **Follow Patterns**: Study existing plugins for established patterns
3. **Test Early**: Write tests as you develop, not after
4. **Document Intent**: Every function should clearly state its purpose
5. **Validate Often**: Run naming and quality checks frequently during development
